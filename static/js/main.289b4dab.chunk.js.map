{"version":3,"sources":["components/Counter/FeedbackOptions/FeedbackOptions.jsx","components/Counter/Statistics/Statistics.jsx","components/Counter/Section/Section.jsx","components/Counter/Notification/Notification.jsx","components/Counter/Counter.jsx","App.js","index.js","components/Counter/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onClick","map","option","type","className","s","cornerButton","name","value","Statistics","total","percentage","good","neutral","bad","Section","title","children","Notification","message","Counter","useReducer","state","action","payload","Error","dispatch","countTotalFeedback","totalFeedback","Math","floor","countPositiveFeedbackPercentage","e","target","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iSAwBeA,EArBS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAClC,OAAOD,EAAQE,KAAI,SAAAC,GACjB,OACE,gCACE,uBACEC,KAAK,SACLC,UAAWC,IAAEC,aACbC,KAAML,EACNM,MAAON,EACPF,QAASA,KANDE,OCkBHO,MAtBf,YAA6E,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,WAA+C,IAAnCZ,QAAWa,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,IAEjE,OACE,gCACE,uCAAUF,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWJ,KACX,mDAAsBC,SCMbI,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCIQC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCuEEC,MAnEf,WAeE,MAA0BC,sBAd1B,SAAsBC,EAAOC,GAC3B,OAAQA,EAAOpB,MACb,IAAK,OACH,OAAO,2BAAKmB,GAAZ,IAAmBV,KAAMU,EAAMV,KAAOW,EAAOC,UAC/C,IAAK,UACH,OAAO,2BAAKF,GAAZ,IAAmBT,QAASS,EAAMT,QAAUU,EAAOC,UACrD,IAAK,MACH,OAAO,2BAAKF,GAAZ,IAAmBR,IAAKQ,EAAMR,IAAMS,EAAOC,UAE7C,QACE,MAAM,IAAIC,MAAJ,4BAA+BF,EAAOpB,UAIC,CACjDS,KAAM,EACNC,QAAS,EACTC,IAAK,IAHP,mBAAOQ,EAAP,KAAcI,EAAd,KAMMC,EAAqB,WAIzB,OAH+BL,EAAvBV,KAAuBU,EAAjBT,QAAiBS,EAARR,KAanBJ,EAAQiB,IACRhB,EARkC,WACtC,IAAQC,EAASU,EAATV,KACFgB,EAAgBD,IAEtB,OADmBE,KAAKC,MAAc,IAAPlB,EAAcgB,GAK5BG,GAEnB,OACE,gCACE,cAAC,EAAD,CAASf,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEjB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,QAAS,SAAAgC,GACPN,EAAS,CAAEvB,KAAK,GAAD,OAAK6B,EAAEC,OAAO1B,MAAQiB,QAAS,SAKzC,IAAVd,EACC,cAAC,EAAD,CAAcS,QAAS,sBAEvB,cAAC,EAAD,CAASH,MAAO,aAAhB,SACE,cAAC,EAAD,CAIEjB,QAASuB,EACTZ,MAAOA,EACPC,WAAYA,UCvDTuB,MARf,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,OCDN+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,aAAe,yC","file":"static/js/main.289b4dab.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from 'components/Counter/FeedbackOptions/FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onClick }) => {\n  return options.map(option => {\n    return (\n      <label key={option}>\n        <input\n          type=\"submit\"\n          className={s.cornerButton}\n          name={option}\n          value={option}\n          onClick={onClick}\n        />\n      </label>\n    );\n  });\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Statistics({ total, percentage, options: { good, neutral, bad } }) {\n  // console.log(total, percentage, good, neutral, bad);\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positiv Feedback: {percentage}</p>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  total: PropTypes.number.isRequired,\n  percentage: PropTypes.number.isRequired,\n  options: PropTypes.objectOf(PropTypes.number.isRequired).isRequired,\n  // good: PropTypes.number.isRequired,\n  // neutral: PropTypes.number.isRequired,\n  // bad: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { useReducer } from 'react';\n// import s from 'components/Counter/Counter.module.css';\nimport FeedbackOptions from 'components/Counter/FeedbackOptions';\nimport Statistics from 'components/Counter/Statistics';\nimport Section from 'components/Counter/Section';\nimport Notification from 'components/Counter/Notification';\n\nfunction Counter() {\n  function countReducer(state, action) {\n    switch (action.type) {\n      case 'good':\n        return { ...state, good: state.good + action.payload };\n      case 'neutral':\n        return { ...state, neutral: state.neutral + action.payload };\n      case 'bad':\n        return { ...state, bad: state.bad + action.payload };\n\n      default:\n        throw new Error(`Unsuported action ${action.type}`);\n    }\n  }\n\n  const [state, dispatch] = useReducer(countReducer, {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const countTotalFeedback = () => {\n    const { good, neutral, bad } = state;\n    // console.log(good, neutral, bad);\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const { good } = state;\n    const totalFeedback = countTotalFeedback();\n    const percentage = Math.floor((good * 100) / totalFeedback);\n    return percentage;\n  };\n\n  const total = countTotalFeedback();\n  const percentage = countPositiveFeedbackPercentage();\n\n  return (\n    <div>\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onClick={e => {\n            dispatch({ type: `${e.target.name}`, payload: 1 });\n          }}\n        />\n      </Section>\n\n      {total === 0 ? (\n        <Notification message={'No feedback given'} />\n      ) : (\n        <Section title={'Statistics'}>\n          <Statistics\n            // good={state.good}\n            // neutral={state.neutral}\n            // bad={state.bad}\n            options={state}\n            total={total}\n            percentage={percentage}\n          />\n        </Section>\n      )}\n    </div>\n  );\n}\n\nexport default Counter;\n\n// ========= useState\n// const [good, setGood] = useState(initialValue);\n// const [neutral, setNeutral] = useState(initialValue);\n// const [bad, setBad] = useState(initialValue);\n\n// const addFeedback = e => {\n//   const name = e.target.name;\n\n//   switch (name) {\n//     case 'good':\n//       setGood(prev => prev + 1);\n//       break;\n//     case 'neutral':\n//       setNeutral(prev => prev + 1);\n//       break;\n//     case 'bad':\n//       setBad(prev => prev + 1);\n//       console.log(bad);\n//       break;\n//     default:\n//       throw new Error(`Unsuported action ${name}`);\n//   }\n// };\n","import './App.css';\nimport Counter from 'components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cornerButton\":\"FeedbackOptions_cornerButton__3HlUM\"};"],"sourceRoot":""}